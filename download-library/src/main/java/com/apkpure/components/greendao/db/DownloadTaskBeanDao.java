package com.apkpure.components.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.apkpure.components.downloader.db.convert.MissionStatusTypeConverter;
import com.apkpure.components.downloader.db.enums.DownloadTaskStatusType;

import com.apkpure.components.downloader.db.bean.DownloadTaskBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "download_tasks".
*/
public class DownloadTaskBeanDao extends AbstractDao<DownloadTaskBean, String> {

    public static final String TABLENAME = "download_tasks";

    /**
     * Properties of entity DownloadTaskBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", true, "_download_url");
        public final static Property AbsolutePath = new Property(1, String.class, "absolutePath", false, "_absolute_path");
        public final static Property ParamData = new Property(2, String.class, "paramData", false, "_param_date");
        public final static Property DownloadTaskStatusType = new Property(3, Integer.class, "downloadTaskStatusType", false, "_download_task_status_type");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "_date");
        public final static Property CurrentOffset = new Property(5, long.class, "currentOffset", false, "_current_offset");
        public final static Property TotalLength = new Property(6, long.class, "totalLength", false, "_total_length");
        public final static Property ShowNotification = new Property(7, boolean.class, "showNotification", false, "_show_notification");
        public final static Property Flag = new Property(8, int.class, "flag", false, "_flag");
        public final static Property NotificationId = new Property(9, int.class, "notificationId", false, "_notification_id");
        public final static Property ShortName = new Property(10, String.class, "shortName", false, "_short_name");
    }

    private final MissionStatusTypeConverter downloadTaskStatusTypeConverter = new MissionStatusTypeConverter();

    public DownloadTaskBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadTaskBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"download_tasks\" (" + //
                "\"_download_url\" TEXT PRIMARY KEY NOT NULL ," + // 0: url
                "\"_absolute_path\" TEXT," + // 1: absolutePath
                "\"_param_date\" TEXT," + // 2: paramData
                "\"_download_task_status_type\" INTEGER," + // 3: downloadTaskStatusType
                "\"_date\" INTEGER," + // 4: date
                "\"_current_offset\" INTEGER NOT NULL ," + // 5: currentOffset
                "\"_total_length\" INTEGER NOT NULL ," + // 6: totalLength
                "\"_show_notification\" INTEGER NOT NULL ," + // 7: showNotification
                "\"_flag\" INTEGER NOT NULL ," + // 8: flag
                "\"_notification_id\" INTEGER NOT NULL ," + // 9: notificationId
                "\"_short_name\" TEXT);"); // 10: shortName
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_download_tasks__download_url ON \"download_tasks\"" +
                " (\"_download_url\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"download_tasks\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadTaskBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUrl());
 
        String absolutePath = entity.getAbsolutePath();
        if (absolutePath != null) {
            stmt.bindString(2, absolutePath);
        }
 
        String paramData = entity.getParamData();
        if (paramData != null) {
            stmt.bindString(3, paramData);
        }
 
        DownloadTaskStatusType downloadTaskStatusType = entity.getDownloadTaskStatusType();
        if (downloadTaskStatusType != null) {
            stmt.bindLong(4, downloadTaskStatusTypeConverter.convertToDatabaseValue(downloadTaskStatusType));
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
        stmt.bindLong(6, entity.getCurrentOffset());
        stmt.bindLong(7, entity.getTotalLength());
        stmt.bindLong(8, entity.getShowNotification() ? 1L: 0L);
        stmt.bindLong(9, entity.getFlag());
        stmt.bindLong(10, entity.getNotificationId());
 
        String shortName = entity.getShortName();
        if (shortName != null) {
            stmt.bindString(11, shortName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadTaskBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUrl());
 
        String absolutePath = entity.getAbsolutePath();
        if (absolutePath != null) {
            stmt.bindString(2, absolutePath);
        }
 
        String paramData = entity.getParamData();
        if (paramData != null) {
            stmt.bindString(3, paramData);
        }
 
        DownloadTaskStatusType downloadTaskStatusType = entity.getDownloadTaskStatusType();
        if (downloadTaskStatusType != null) {
            stmt.bindLong(4, downloadTaskStatusTypeConverter.convertToDatabaseValue(downloadTaskStatusType));
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
        stmt.bindLong(6, entity.getCurrentOffset());
        stmt.bindLong(7, entity.getTotalLength());
        stmt.bindLong(8, entity.getShowNotification() ? 1L: 0L);
        stmt.bindLong(9, entity.getFlag());
        stmt.bindLong(10, entity.getNotificationId());
 
        String shortName = entity.getShortName();
        if (shortName != null) {
            stmt.bindString(11, shortName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public DownloadTaskBean readEntity(Cursor cursor, int offset) {
        DownloadTaskBean entity = new DownloadTaskBean( //
            cursor.getString(offset + 0), // url
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // absolutePath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // paramData
            cursor.isNull(offset + 3) ? null : downloadTaskStatusTypeConverter.convertToEntityProperty(cursor.getInt(offset + 3)), // downloadTaskStatusType
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // date
            cursor.getLong(offset + 5), // currentOffset
            cursor.getLong(offset + 6), // totalLength
            cursor.getShort(offset + 7) != 0, // showNotification
            cursor.getInt(offset + 8), // flag
            cursor.getInt(offset + 9), // notificationId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // shortName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadTaskBean entity, int offset) {
        entity.setUrl(cursor.getString(offset + 0));
        entity.setAbsolutePath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParamData(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDownloadTaskStatusType(cursor.isNull(offset + 3) ? null : downloadTaskStatusTypeConverter.convertToEntityProperty(cursor.getInt(offset + 3)));
        entity.setDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setCurrentOffset(cursor.getLong(offset + 5));
        entity.setTotalLength(cursor.getLong(offset + 6));
        entity.setShowNotification(cursor.getShort(offset + 7) != 0);
        entity.setFlag(cursor.getInt(offset + 8));
        entity.setNotificationId(cursor.getInt(offset + 9));
        entity.setShortName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DownloadTaskBean entity, long rowId) {
        return entity.getUrl();
    }
    
    @Override
    public String getKey(DownloadTaskBean entity) {
        if(entity != null) {
            return entity.getUrl();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadTaskBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
